import { useState } from "react";
import React from "react";

export default function VulnerabilityScanner() {
  const [url, setUrl] = useState("");
  const [report, setReport] = useState(null);
  const [loading, setLoading] = useState(false);

  const securityHeaders = [
    "X-Content-Type-Options",
    "Strict-Transport-Security",
    "Content-Security-Policy",
    "X-Frame-Options",
    "X-XSS-Protection",
  ];

  const handleScan = async () => {
    setLoading(true);
    setReport(null);

    try {
      const response = await fetch(url, { method: "GET", mode: "no-cors" });
      const text = await response.text();
      const parser = new DOMParser();
      const doc = parser.parseFromString(text, "text/html");

      // Check security headers
      const missingHeaders = securityHeaders.filter(
        (header) => !response.headers.get(header)
      );

      // Check form security
      const forms = doc.querySelectorAll("form");
      let formIssues = [];
      forms.forEach((form) => {
        const action = form.getAttribute("action");
        const method = form.getAttribute("method") || "GET";
        if (!action) formIssues.push("Form missing action attribute.");
        if (method.toUpperCase() === "GET")
          formIssues.push("Form uses GET method instead of POST.");
      });

      setReport({
        missingHeaders,
        formIssues,
      });
    } catch (error) {
      setReport({ error: "Failed to scan the website. Ensure CORS is enabled on the target site." });
    }

    setLoading(false);
  };

  return (
    <div className="p-6 bg-gray-900 text-white min-h-screen flex flex-col items-center">
      <h1 className="text-3xl font-bold mb-4">Web Vulnerability Scanner</h1>
      <input
        type="text"
        placeholder="Enter website URL (e.g. https://example.com)"
        className="w-80 p-2 rounded bg-gray-800 text-white border border-gray-600 mb-4"
        value={url}
        onChange={(e) => setUrl(e.target.value)}
      />
      <button
        className="px-4 py-2 bg-blue-600 rounded text-white hover:bg-blue-700"
        onClick={handleScan}
        disabled={loading}
      >
        {loading ? "Scanning..." : "Scan Website"}
      </button>

      {report && (
        <div className="mt-6 w-full max-w-2xl bg-gray-800 p-4 rounded shadow-md">
          <h2 className="text-xl font-semibold">Scan Report</h2>
          {report.error ? (
            <p className="text-red-500">{report.error}</p>
          ) : (
            <ul className="mt-2 space-y-2">
              <li className="p-2 bg-gray-700 rounded">
                <p className="font-semibold">Missing Security Headers:</p>
                {report.missingHeaders.length > 0 ? (
                  <p className="text-yellow-400">{report.missingHeaders.join(", ")}</p>
                ) : (
                  <p className="text-green-400">No missing security headers.</p>
                )}
              </li>
              <li className="p-2 bg-gray-700 rounded">
                <p className="font-semibold">Form Security Issues:</p>
                {report.formIssues.length > 0 ? (
                  <p className="text-yellow-400">{report.formIssues.join(", ")}</p>
                ) : (
                  <p className="text-green-400">No insecure forms found.</p>
                )}
              </li>
            </ul>
          )}
        </div>
      )}
    </div>
  );
}
