import { useState } from "react";
import React from "react";

export default function VulnerabilityScanner() {
  const [url, setUrl] = useState("");
  const [report, setReport] = useState(null);
  const [loading, setLoading] = useState(false);

  const securityHeaders = [
    "X-Content-Type-Options",
    "Strict-Transport-Security",
    "Content-Security-Policy",
    "X-Frame-Options",
    "X-XSS-Protection",
  ];

  const handleScan = async () => {
    setLoading(true);
    setReport(null);

    try {
      // Fetch HTML via proxy to bypass CORS
      const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(url)}`;
      const response = await fetch(proxyUrl);
      const data = await response.json();
      const htmlContent = data.contents;

      // Parse HTML
      const parser = new DOMParser();
      const doc = parser.parseFromString(htmlContent, "text/html");

      // 1. Check Security Headers (via proxy headers - limited accuracy)
      const securityHeadersReport = securityHeaders.map((header) => ({
        name: header,
        status: data.headers?.[header] ? "Present" : "Missing",
      }));

      //Check Outdated Software
      const outdatedSoftware = [];
      const generatorMeta = doc.querySelector('meta[name="generator"]');
      if (generatorMeta) {
        const content = generatorMeta.getAttribute("content") || "";
        if (content.toLowerCase().includes("wordpress")) {
          outdatedSoftware.push("WordPress detected (check for updates)");
        } else if (content.toLowerCase().includes("drupal")) {
          outdatedSoftware.push("Drupal detected (check for updates)");
        } else if (content.toLowerCase().includes("joomla")) {
          outdatedSoftware.push("Joomla detected (check for updates)");
        }
      }

      //Check Insecure Forms
      const formIssues = [];
      const forms = doc.querySelectorAll("form");
      forms.forEach((form) => {
        const action = form.getAttribute("action");
        const method = form.getAttribute("method") || "GET";
        if (!action) formIssues.push("Form missing action attribute");
        if (method.toUpperCase() === "GET") formIssues.push("Form uses GET method");
      });

      setReport({
        securityHeaders: securityHeadersReport,
        outdatedSoftware,
        formIssues,
      });
    } catch (error) {
      setReport({ error: "Scan failed. Ensure the URL is valid and try again." });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-6 bg-gray-900 min-h-screen flex flex-col items-center">
      <h1 className="text-3xl font-bold text-white mb-6">Web Vulnerability Scanner</h1>
      
      
      <div className="w-full max-w-2xl bg-gray-800 p-6 rounded-lg shadow-lg mb-6">
        <input
          type="text"
          placeholder="https://example.com"
          value={url}
          onChange={(e) => setUrl(e.target.value)}
          className="w-full p-3 rounded bg-gray-700 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <button
          onClick={handleScan}
          disabled={loading || !url}
          className="mt-4 w-full py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors disabled:bg-gray-600"
        >
          {loading ? "Scanning..." : "Scan Website"}
        </button>
      </div>

    
      {report && (
        <div className="w-full max-w-2xl bg-gray-800 p-6 rounded-lg shadow-lg">
          <h2 className="text-2xl font-bold text-white mb-4">Scan Results</h2>
          
          {report.error ? (
            <p className="text-red-400">{report.error}</p>
          ) : (
            <div className="space-y-6">
              {/* Security Headers */}
              <div>
                <h3 className="text-xl font-semibold text-white mb-2">Security Headers</h3>
                <div className="space-y-2">
                  {report.securityHeaders.map((header) => (
                    <div key={header.name} className="flex justify-between items-center bg-gray-700 p-3 rounded">
                      <span className="text-gray-300">{header.name}</span>
                      <span className={`px-3 py-1 rounded-full ${header.status === "Present" ? "bg-green-600 text-green-100" : "bg-red-600 text-red-100"}`}>
                        {header.status}
                      </span>
                    </div>
                  ))}
                </div>
              </div>

            
              <div>
                <h3 className="text-xl font-semibold text-white mb-2">Outdated Software</h3>
                {report.outdatedSoftware.length > 0 ? (
                  <ul className="space-y-2">
                    {report.outdatedSoftware.map((item, index) => (
                      <li key={index} className="bg-gray-700 p-3 rounded text-yellow-400">
                        {item}
                      </li>
                    ))}
                  </ul>
                ) : (
                  <p className="text-gray-400">No outdated software detected.</p>
                )}
              </div>

            
              <div>
                <h3 className="text-xl font-semibold text-white mb-2">Insecure Forms</h3>
                {report.formIssues.length > 0 ? (
                  <ul className="space-y-2">
                    {report.formIssues.map((issue, index) => (
                      <li key={index} className="bg-gray-700 p-3 rounded text-yellow-400">
                        {issue}
                      </li>
                    ))}
                  </ul>
                ) : (
                  <p className="text-gray-400">No form issues found.</p>
                )}
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
